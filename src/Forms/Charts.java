package Forms;

import Classes.DataBase;
import Classes.SafeZone;
import java.awt.BorderLayout;
import java.awt.Container;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

public class Charts extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Charts.class.getName());
    private HomePage homePage = null;

    public Charts() {
        initComponents();
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent e) {
                homePage = null;
            }
        });
    }

    public Charts(HomePage homePage) {
        this();
        this.homePage = homePage;
        jMenu1.add(new JLabel("Number of Months:"));
        JFormattedTextField intField = new JFormattedTextField();
        intField.setValue(1); intField.setColumns(5); intField.setValue(1);
        jMenu1.add(intField);
        setJMenuBar(jMenuBar1);
        showOperations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setPreferredSize(new java.awt.Dimension(400, 80));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
        );

        jMenu1.setText("Tables");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Show");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Charts");

        jMenuItem2.setText("Show");
        jMenu2.add(jMenuItem2);
        jMenu2.add(jSeparator2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

protected void showOperations() {
    DataBase db = new DataBase();
    try {
        ResultSet rs = db.executeQuery(
            "SELECT id, datetime, " +
            "CASE WHEN deposit_id IS NOT NULL OR (transfer_id IS NOT NULL AND destination_id = ?) THEN value " +
            "ELSE -value END AS value, " +
            "CASE WHEN deposit_id IS NOT NULL THEN 'deposit' " +
            "WHEN withdraw_id IS NOT NULL THEN 'withdraw' " +
            "WHEN transfer_id IS NOT NULL THEN 'transfer' END AS type " +
            "FROM operations WHERE capital_id = ? OR destination_id = ? " +
            "ORDER BY datetime DESC",
            homePage.capital.getId(), homePage.capital.getId(), homePage.capital.getId()
        );

        // ðŸ§¹ Limpa o conteÃºdo anterior
        jPanel1.removeAll();

        DefaultTableModel model;
        boolean isSafeZone = homePage.capital instanceof SafeZone;

        if (isSafeZone) {
            model = new DefaultTableModel(
                new Object[]{"ID", "Type", "Date/Time", "Value", "Fee", "Balance"}, 0
            );
        } else {
            model = new DefaultTableModel(
                new Object[]{"ID", "Type", "Date/Time", "Value"}, 0
            );
        }

        java.util.List<Map<String, Object>> operations = new ArrayList<>();

        while (rs.next()) {
            Map<String, Object> op = new HashMap<>();
            op.put("id", rs.getInt("id"));
            op.put("type", rs.getString("type"));
            op.put("datetime", rs.getString("datetime"));
            op.put("value", rs.getDouble("value"));
            operations.add(op);
        }

        if (isSafeZone) {
            double currentBalance = homePage.capital.getBalance();
            double rate = SafeZone.fromId(homePage.capital.getId()).getInterestRate();

            for (int i = 0; i < operations.size(); i++) {
                Map<String, Object> op = operations.get(i);

                LocalDateTime dataOp = LocalDateTime.parse(
                    (String) op.get("datetime"),
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                );

                long dias;
                if (i == 0) {
                    dias = ChronoUnit.DAYS.between(dataOp.toLocalDate(), LocalDate.now());
                } else {
                    LocalDateTime dataAnterior = LocalDateTime.parse(
                        (String) operations.get(i - 1).get("datetime"),
                        DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                    );
                    dias = ChronoUnit.DAYS.between(dataOp.toLocalDate(), dataAnterior.toLocalDate());
                }

                double fee = currentBalance - currentBalance / Math.pow(1 + rate, dias);
                double value = (double) op.get("value");

                model.addRow(new Object[]{
                    op.get("id"),
                    op.get("type"),
                    op.get("datetime"),
                    String.format("%.2f", value),
                    String.format("%.2f", fee),
                    String.format("%.2f", currentBalance)
                });

                currentBalance -= (value + fee);
            }

        } else {
            for (Map<String, Object> op : operations) {
                model.addRow(new Object[]{
                    op.get("id"),
                    op.get("type"),
                    op.get("datetime"),
                    String.format("%.2f", op.get("value"))
                });
            }
        }

        JTable table = new JTable(model);
        table.setFillsViewportHeight(true);

        // ðŸ§© Ajuste de largura das colunas
        int charWidth = 7;
        int[] columnChars = isSafeZone
                ? new int[]{6, 10, 18, 10, 6, 10}
                : new int[]{6, 10, 18, 10};

        TableColumnModel columnModel = table.getColumnModel();
        for (int i = 0; i < columnChars.length; i++) {
            columnModel.getColumn(i).setPreferredWidth(columnChars[i] * charWidth);
        }

        // ðŸªŸ Cria o JScrollPane e fixa nas bordas do painel
        JScrollPane scroll = new JScrollPane(table);
        scroll.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0)); // sem margens

        // ðŸ§± Usa BorderLayout para preencher tudo
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(scroll, BorderLayout.CENTER);

        // ðŸªŸ Ajusta jPanel1 para preencher o JFrame pai
        Container parent = jPanel1.getParent();
        if (parent instanceof JFrame) {
            JFrame frame = (JFrame) parent;
            frame.getContentPane().setLayout(new BorderLayout());
            frame.getContentPane().add(jPanel1, BorderLayout.CENTER);
        }

        jPanel1.revalidate();
        jPanel1.repaint();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    
    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        showOperations();
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Charts().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
